{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport AppLayout from '../components/AppLayout';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  // next에서 넣어주는 props\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.25.3/antd.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n};\n\nNodeBird.getInitialProps = async context => {\n  console.log(context);\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {};\n\n  if (Component.getInitialProps) {\n    pageProps = await context.Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(NodeBird);","map":{"version":3,"sources":["C:/Users/suksa/Desktop/code/new-react-nodeBird/front/pages/_app.js"],"names":["React","Head","PropTypes","withRedux","AppLayout","createStore","compose","applyMiddleware","Provider","createSagaMiddleware","reducer","rootSaga","NodeBird","Component","store","pageProps","propTypes","elementType","isRequired","object","getInitialProps","context","console","log","ctx","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","run"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,KAAb;AAAoBC,EAAAA;AAApB,CAAD,KAAqC;AAAE;AACpD,SACI,MAAC,QAAD;AAAU,IAAA,KAAK,EAAED;AAAjB,KACI,MAAC,IAAD,QACI,gCADJ,EAEI;AACI,IAAA,GAAG,EAAC,YADR;AAEI,IAAA,IAAI,EAAC;AAFT,IAFJ,CADJ,EAQI,MAAC,SAAD,QACI,MAAC,SAAD,EAAeC,SAAf,CADJ,CARJ,CADJ;AAcH,CAfD;;AAiBAH,QAAQ,CAACI,SAAT,GAAqB;AACjBH,EAAAA,SAAS,EAAEX,SAAS,CAACe,WAAV,CAAsBC,UADhB;AAEjBJ,EAAAA,KAAK,EAAEZ,SAAS,CAACiB,MAAV,CAAiBD,UAFP;AAGjBH,EAAAA,SAAS,EAAEb,SAAS,CAACiB,MAAV,CAAiBD;AAHX,CAArB;;AAMAN,QAAQ,CAACQ,eAAT,GAA2B,MAAOC,OAAP,IAAmB;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAM;AAAEG,IAAAA,GAAF;AAAOX,IAAAA;AAAP,MAAqBQ,OAA3B;AACA,MAAIN,SAAS,GAAG,EAAhB;;AACA,MAAIF,SAAS,CAACO,eAAd,EAA+B;AAC3BL,IAAAA,SAAS,GAAG,MAAMM,OAAO,CAACR,SAAR,CAAkBO,eAAlB,CAAkCI,GAAlC,CAAlB;AACH;;AACD,SAAO;AAAET,IAAAA;AAAF,GAAP;AACH,CARD;;AAUA,MAAMU,cAAc,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAC9C,QAAMC,cAAc,GAAGnB,oBAAoB,EAA3C;AACA,QAAMoB,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GAAG,QACbxB,OAAO,CAACC,eAAe,CAAC,GAAGsB,WAAJ,CAAhB,CADM,GAEbvB,OAAO,CACPC,eAAe,CAAC,GAAGsB,WAAJ,CADR,EAEP,CAACF,OAAO,CAACI,QAAT,IAAqB,OAAOC,MAAM,CAACC,4BAAd,KAA+C,WAApE,GAAkFD,MAAM,CAACC,4BAAP,EAAlF,GAA0HC,CAAC,IAAIA,CAFxH,CAFX;AAMA,QAAMpB,KAAK,GAAGT,WAAW,CAACK,OAAD,EAAUgB,YAAV,EAAwBI,QAAxB,CAAzB;AACAF,EAAAA,cAAc,CAACO,GAAf,CAAmBxB,QAAnB;AACA,SAAOG,KAAP;AACD,CAZH;;AAcE,eAAeX,SAAS,CAACsB,cAAD,CAAT,CAA0Bb,QAA1B,CAAf","sourcesContent":["import React from \"react\"\r\nimport Head from 'next/head'\r\nimport PropTypes from 'prop-types'\r\nimport withRedux from 'next-redux-wrapper'\r\nimport AppLayout from '../components/AppLayout'\r\nimport { createStore, compose, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport reducer from '../reducers'\r\nimport rootSaga from '../sagas';\r\n\r\nconst NodeBird = ({ Component, store, pageProps }) => { // next에서 넣어주는 props\r\n    return (\r\n        <Provider store={store}>\r\n            <Head>\r\n                <title>NodeBird</title>\r\n                <link\r\n                    rel=\"stylesheet\"\r\n                    href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.25.3/antd.css\"\r\n                />\r\n            </Head>\r\n            <AppLayout>\r\n                <Component {...pageProps} />\r\n            </AppLayout>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType.isRequired,\r\n    store: PropTypes.object.isRequired,\r\n    pageProps: PropTypes.object.isRequired,\r\n}\r\n\r\nNodeBird.getInitialProps = async (context) => {\r\n    console.log(context)\r\n    const { ctx, Component } = context\r\n    let pageProps = {}\r\n    if (Component.getInitialProps) {\r\n        pageProps = await context.Component.getInitialProps(ctx)\r\n    }\r\n    return { pageProps }\r\n}\r\n\r\nconst configureStore = (initialState, options) => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n        applyMiddleware(...middlewares),\r\n        !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n      );\r\n    const store = createStore(reducer, initialState, enhancer);\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n  };\r\n  \r\n  export default withRedux(configureStore)(NodeBird);\r\n\r\n"]},"metadata":{},"sourceType":"module"}