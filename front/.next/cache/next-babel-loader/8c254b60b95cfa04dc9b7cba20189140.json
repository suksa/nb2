{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, takeEvery, call, put } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user';\n\nfunction loginApi(loginData) {\n  return axios.post('/user/login', loginData, {\n    withCredentials: true // backend와 쿠키 주고받을수있게됨\n\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginApi, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n} //////////////////////////////////////\n\n\nfunction signUpApi(signUpData) {\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield call(signUpApi)\n    yield call(signUpApi, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n} //////////////////////////////////////\n\n\nfunction logOutApi(logOutData) {\n  return axios.post('/user/logout', {}, logOutData, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutApi);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n} //////////////////////////////////////\n\n\nfunction loadUserApi() {\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserApi);\n    console.log(result);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/suksa/Desktop/code/new-react-nodeBird/front/sagas/user.js"],"names":["axios","all","fork","takeEvery","call","put","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","loginApi","loginData","post","withCredentials","login","action","result","data","type","e","console","error","watchLogin","signUpApi","signUpData","signUp","watchSignUp","logOutApi","logOutData","logOut","watchLogOut","loadUserApi","get","loadUser","log","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { all, fork, takeEvery, call, put } from 'redux-saga/effects'\r\nimport {\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOAD_USER_REQUEST,\r\n    LOAD_USER_SUCCESS,\r\n    LOAD_USER_FAILURE,\r\n} from '../reducers/user'\r\n\r\nfunction loginApi(loginData) {\r\n    return axios.post('/user/login', loginData, {\r\n        withCredentials: true // backend와 쿠키 주고받을수있게됨\r\n    })\r\n}\r\n\r\nfunction* login(action) {\r\n    try {\r\n        const result = yield call(loginApi, action.data)\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch (e) {\r\n        console.error(e)\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST, login)\r\n}\r\n//////////////////////////////////////\r\nfunction signUpApi(signUpData) {\r\n    return axios.post('/user/', signUpData)\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        // yield call(signUpApi)\r\n        yield call(signUpApi, action.data)\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS\r\n        })\r\n    } catch (e) {\r\n        console.error(e)\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n//////////////////////////////////////\r\nfunction logOutApi(logOutData) {\r\n    return axios.post('/user/logout', {}, logOutData, {\r\n        withCredentials: true\r\n    })\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        yield call(logOutApi)\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS\r\n        })\r\n    } catch (e) {\r\n        console.error(e)\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeEvery(LOG_OUT_REQUEST, logOut)\r\n}\r\n//////////////////////////////////////\r\nfunction loadUserApi() {\r\n    return axios.get('/user/', {\r\n        withCredentials: true\r\n    })\r\n}\r\n\r\nfunction* loadUser() {\r\n    try {\r\n        const result = yield call(loadUserApi)\r\n        console.log(result)\r\n        yield put({\r\n            type: LOAD_USER_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch (e) {\r\n        console.error(e)\r\n        yield put({\r\n            type: LOAD_USER_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n    yield takeEvery(LOAD_USER_REQUEST, loadUser)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}