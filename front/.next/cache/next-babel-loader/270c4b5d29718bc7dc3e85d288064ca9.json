{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      // post reducer의 데이터를 수정\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} /////////////////\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} /////////////////\n\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n} /////////////////\n\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n} /////////////////\n\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n} /////////////////\n\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n} /////////////////\n\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`/post/images`, formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n} /////////////////\n\n\nfunction likePostAPI(formData) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n} /////////////////\n\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* commentSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnLikePost)]);\n}","map":{"version":3,"sources":["C:/Users/suksa/Desktop/code/new-react-nodeBird/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","get","loadComments","comments","watchLoadComments","loadMainPostsAPI","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","watchLoadUserPosts","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","console","log","watchLikePost","unlikePostAPI","delete","unlikePost","userId","watchUnLikePost","commentSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\nimport {\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    LOAD_MAIN_POSTS_REQUEST,\r\n    LOAD_MAIN_POSTS_SUCCESS,\r\n    LOAD_MAIN_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n    LOAD_COMMENTS_REQUEST,\r\n    LOAD_COMMENTS_SUCCESS,\r\n    LOAD_COMMENTS_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n} from '../reducers/post'\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post', postData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({ // post reducer의 데이터를 수정\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n/////////////////\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n                comment: result.data,\r\n            }\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n/////////////////\r\nfunction loadCommentsAPI(postId) {\r\n    return axios.get(`/post/${postId}/comments`)\r\n}\r\n\r\nfunction* loadComments(action) {\r\n    try {\r\n        const result = yield call(loadCommentsAPI, action.data)\r\n        yield put({\r\n            type: LOAD_COMMENTS_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                comments: result.data,\r\n            }\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_COMMENTS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\r\n}\r\n/////////////////\r\nfunction loadMainPostsAPI() {\r\n    return axios.get('/posts')\r\n}\r\n\r\nfunction* loadMainPosts() {\r\n    try {\r\n        const result = yield call(loadMainPostsAPI)\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts)\r\n}\r\n/////////////////\r\nfunction loadHashtagPostsAPI(tag) {\r\n    return axios.get(`/hashtag/${tag}`)\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data)\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\r\n}\r\n/////////////////\r\nfunction loadUserPostsAPI(id) {\r\n    return axios.get(`/user/${id}/posts`)\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data)\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts)\r\n}\r\n/////////////////\r\nfunction uploadImagesAPI(formData) {\r\n    return axios.post(`/post/images`, formData, {\r\n        withCredentials: true\r\n    })\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data)\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages)\r\n}\r\n/////////////////\r\nfunction likePostAPI(formData) {\r\n    return axios.post(`/post/${postId}/like`, {}, {\r\n        withCredentials: true\r\n    })\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data)\r\n        console.log(result)\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost)\r\n}\r\n/////////////////\r\nfunction unlikePostAPI(postId) {\r\n    return axios.delete(`/post/${postId}/like`, {\r\n        withCredentials: true\r\n    })\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data)\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            }\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchUnLikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost)\r\n}\r\n\r\nexport default function* commentSaga() {\r\n    yield all([\r\n        fork(watchLoadMainPosts),\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchLoadComments),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnLikePost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}