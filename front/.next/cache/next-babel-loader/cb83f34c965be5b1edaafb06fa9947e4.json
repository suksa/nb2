{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      // post reducer의 데이터를 수정\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} /////////////////\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} /////////////////\n\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n} /////////////////\n\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n} /////////////////\n\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n} /////////////////\n\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n} /////////////////\n\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`/post/images`, formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nexport default function* commentSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages)]);\n}","map":{"version":3,"sources":["C:/Users/suksa/Desktop/code/new-react-nodeBird/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","get","loadComments","comments","watchLoadComments","loadMainPostsAPI","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","watchLoadUserPosts","uploadImagesAPI","formData","uploadImages","watchUploadImages","commentSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\nimport {\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    LOAD_MAIN_POSTS_REQUEST,\r\n    LOAD_MAIN_POSTS_SUCCESS,\r\n    LOAD_MAIN_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n    LOAD_COMMENTS_REQUEST,\r\n    LOAD_COMMENTS_SUCCESS,\r\n    LOAD_COMMENTS_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n} from '../reducers/post'\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post', postData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({ // post reducer의 데이터를 수정\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n/////////////////\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n                comment: result.data,\r\n            }\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n/////////////////\r\nfunction loadCommentsAPI(postId) {\r\n    return axios.get(`/post/${postId}/comments`)\r\n}\r\n\r\nfunction* loadComments(action) {\r\n    try {\r\n        const result = yield call(loadCommentsAPI, action.data)\r\n        yield put({\r\n            type: LOAD_COMMENTS_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                comments: result.data,\r\n            }\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_COMMENTS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\r\n}\r\n/////////////////\r\nfunction loadMainPostsAPI() {\r\n    return axios.get('/posts')\r\n}\r\n\r\nfunction* loadMainPosts() {\r\n    try {\r\n        const result = yield call(loadMainPostsAPI)\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts)\r\n}\r\n/////////////////\r\nfunction loadHashtagPostsAPI(tag) {\r\n    return axios.get(`/hashtag/${tag}`)\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data)\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\r\n}\r\n/////////////////\r\nfunction loadUserPostsAPI(id) {\r\n    return axios.get(`/user/${id}/posts`)\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data)\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts)\r\n}\r\n/////////////////\r\nfunction uploadImagesAPI(formData) {\r\n    return axios.post(`/post/images`, formData, {\r\n        withCredentials: true\r\n    })\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data)\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages)\r\n}\r\n\r\nexport default function* commentSaga() {\r\n    yield all([\r\n        fork(watchLoadMainPosts),\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchLoadComments),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchUploadImages),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}