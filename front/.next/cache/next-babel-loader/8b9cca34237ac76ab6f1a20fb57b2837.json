{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Button, Card, Avatar, Icon, Form, Input, List, Comment } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(React.Fragment, null);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.string\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/suksa/Desktop/code/new-react-nodeBird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Button","Card","Avatar","Icon","Form","Input","List","Comment","Link","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","propTypes","shape","User","object","content","string","img","createdAt"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,MAAvB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,KAA3C,EAAkDC,IAAlD,EAAwDC,OAAxD,QAAuE,MAAvE;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACuBjB,QAAQ,CAAC,KAAD,CAD/B;AAAA,MACpBkB,iBADoB;AAAA,MACDC,oBADC;;AAAA,mBAEWnB,QAAQ,CAAC,EAAD,CAFnB;AAAA,MAEpBoB,WAFoB;AAAA,MAEPC,cAFO;;AAAA,qBAGZR,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAHC;AAAA,MAGnBC,EAHmB,gBAGnBA,EAHmB;;AAAA,sBAIeX,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAK,CAACL,IAAV;AAAA,GAAN,CAJ1B;AAAA,MAInBQ,YAJmB,iBAInBA,YAJmB;AAAA,MAILC,eAJK,iBAILA,eAJK;;AAK3B,MAAMC,QAAQ,GAAGb,WAAW,EAA5B;AAEA,MAAMc,eAAe,GAAG3B,WAAW,CAAC,YAAM;AACtCkB,IAAAA,oBAAoB,CAAC,UAAAU,IAAI;AAAA,aAAI,CAACA,IAAL;AAAA,KAAL,CAApB;AACH,GAFkC,EAEhC,EAFgC,CAAnC;AAIA,MAAMC,eAAe,GAAG7B,WAAW,CAAC,UAAA8B,CAAC,EAAI;AACrCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACR,EAAL,EAAS;AACL,aAAOS,KAAK,CAAC,aAAD,CAAZ;AACH;;AACDN,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEnB,mBADD;AAELoB,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAEnB,IAAI,CAACoB;AADX;AAFD,KAAD,CAAR;AAMH,GAXkC,EAWhC,CAACb,EAAE,IAAIA,EAAE,CAACa,EAAV,CAXgC,CAAnC;AAaAnC,EAAAA,SAAS,CAAC,YAAM;AACZmB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACH,GAFQ,EAEN,CAACI,YAAY,KAAK,IAAlB,CAFM,CAAT;AAIA,MAAMa,mBAAmB,GAAGrC,WAAW,CAAC,UAAA8B,CAAC,EAAI;AACzCV,IAAAA,cAAc,CAACU,CAAC,CAACQ,MAAF,CAASC,KAAV,CAAd;AACH,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,SACI,2BADJ;AAIH,CApCD;;AAsCAxB,QAAQ,CAACyB,SAAT,GAAqB;AACjBxB,EAAAA,IAAI,EAAEL,SAAS,CAAC8B,KAAV,CAAgB;AAClBC,IAAAA,IAAI,EAAE/B,SAAS,CAACgC,MADE;AAElBC,IAAAA,OAAO,EAAEjC,SAAS,CAACkC,MAFD;AAGlBC,IAAAA,GAAG,EAAEnC,SAAS,CAACkC,MAHG;AAIlBE,IAAAA,SAAS,EAAEpC,SAAS,CAACkC;AAJH,GAAhB;AADW,CAArB;AASA,eAAe9B,QAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport { Button, Card, Avatar, Icon, Form, Input, List, Comment } from 'antd'\r\nimport Link from 'next/link'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post'\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false)\r\n    const [commentText, setCommentText] = useState('')\r\n    const { me } = useSelector(state => state.user)\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post)\r\n    const dispatch = useDispatch()\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev)\r\n    }, [])\r\n\r\n    const onSubmitComment = useCallback(e => {\r\n        e.preventDefault()\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다.')\r\n        }\r\n        dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: {\r\n                postId: post.id,\r\n            }\r\n        })\r\n    }, [me && me.id])\r\n\r\n    useEffect(() => {\r\n        setCommentText('')\r\n    }, [commentAdded === true])\r\n\r\n    const onChangeCommentText = useCallback(e => {\r\n        setCommentText(e.target.value)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n    })\r\n}\r\n\r\nexport default PostCard\r\n"]},"metadata":{},"sourceType":"module"}