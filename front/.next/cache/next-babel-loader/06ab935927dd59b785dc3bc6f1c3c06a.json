{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Button, Card, Avatar, Icon, Form, Input, List, Comment } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(React.Fragment, null);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.string\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/suksa/Desktop/code/new-react-nodeBird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Button","Card","Avatar","Icon","Form","Input","List","Comment","Link","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","propTypes","shape","User","object","content","string","img","createdAt"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,MAAvB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,KAA3C,EAAkDC,IAAlD,EAAwDC,OAAxD,QAAuE,MAAvE;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC3B,QAAM;AAAA,OAACC,iBAAD;AAAA,OAAoBC;AAApB,MAA4CnB,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM;AAAA,OAACoB,WAAD;AAAA,OAAcC;AAAd,MAAgCrB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAEsB,IAAAA;AAAF,MAAST,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA1B;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAoCb,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACN,IAAhB,CAArD;AACA,QAAMU,QAAQ,GAAGb,WAAW,EAA5B;AAEA,QAAMc,eAAe,GAAG3B,WAAW,CAAC,MAAM;AACtCkB,IAAAA,oBAAoB,CAACU,IAAI,IAAI,CAACA,IAAV,CAApB;AACH,GAFkC,EAEhC,EAFgC,CAAnC;AAIA,QAAMC,eAAe,GAAG7B,WAAW,CAAC8B,CAAC,IAAI;AACrCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACV,EAAL,EAAS;AACL,aAAOW,KAAK,CAAC,aAAD,CAAZ;AACH;;AACDN,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEnB,mBADD;AAELoB,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAEnB,IAAI,CAACoB;AADX;AAFD,KAAD,CAAR;AAMH,GAXkC,EAWhC,CAACf,EAAE,IAAIA,EAAE,CAACe,EAAV,CAXgC,CAAnC;AAaAnC,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACH,GAFQ,EAEN,CAACI,YAAY,KAAK,IAAlB,CAFM,CAAT;AAIA,QAAMa,mBAAmB,GAAGrC,WAAW,CAAC8B,CAAC,IAAI;AACzCV,IAAAA,cAAc,CAACU,CAAC,CAACQ,MAAF,CAASC,KAAV,CAAd;AACH,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,SACI,2BADJ;AAIH,CApCD;;AAsCAxB,QAAQ,CAACyB,SAAT,GAAqB;AACjBxB,EAAAA,IAAI,EAAEL,SAAS,CAAC8B,KAAV,CAAgB;AAClBC,IAAAA,IAAI,EAAE/B,SAAS,CAACgC,MADE;AAElBC,IAAAA,OAAO,EAAEjC,SAAS,CAACkC,MAFD;AAGlBC,IAAAA,GAAG,EAAEnC,SAAS,CAACkC,MAHG;AAIlBE,IAAAA,SAAS,EAAEpC,SAAS,CAACkC;AAJH,GAAhB;AADW,CAArB;AASA,eAAe9B,QAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport { Button, Card, Avatar, Icon, Form, Input, List, Comment } from 'antd'\r\nimport Link from 'next/link'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post'\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false)\r\n    const [commentText, setCommentText] = useState('')\r\n    const { me } = useSelector(state => state.user)\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post)\r\n    const dispatch = useDispatch()\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev)\r\n    }, [])\r\n\r\n    const onSubmitComment = useCallback(e => {\r\n        e.preventDefault()\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다.')\r\n        }\r\n        dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: {\r\n                postId: post.id,\r\n            }\r\n        })\r\n    }, [me && me.id])\r\n\r\n    useEffect(() => {\r\n        setCommentText('')\r\n    }, [commentAdded === true])\r\n\r\n    const onChangeCommentText = useCallback(e => {\r\n        setCommentText(e.target.value)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n    })\r\n}\r\n\r\nexport default PostCard\r\n"]},"metadata":{},"sourceType":"module"}