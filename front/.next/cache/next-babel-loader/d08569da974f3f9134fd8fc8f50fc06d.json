{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      // post reducer의 데이터를 수정\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} /////////////////\n\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} /////////////////\n\n\nfunction loadPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* commentSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/suksa/Desktop/code/new-react-nodeBird/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","addCommentAPI","addComment","postId","watchAddComment","loadPostsAPI","get","loadPosts","watchLoadMainPosts","commentSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAMIC,mBANJ,EAOIC,uBAPJ,EAQIC,uBARJ,EASIC,uBATJ,QAUO,kBAVP;;AAYA,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,SAAOX,KAAK,CAACY,IAAN,CAAW,OAAX,EAAoBD,QAApB,EAA8B;AACjCE,IAAAA,eAAe,EAAE;AADgB,GAA9B,CAAP;AAGH;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMjB,IAAI,CAACW,UAAD,EAAaK,MAAM,CAACE,IAApB,CAAzB;AACA,UAAMpB,GAAG,CAAC;AAAE;AACRqB,MAAAA,IAAI,EAAEhB,gBADA;AAENe,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOE,CAAP,EAAU;AACR,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEf,gBADA;AAENiB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUE,YAAV,GAAyB;AACrB,QAAMzB,UAAU,CAACK,gBAAD,EAAmBa,OAAnB,CAAhB;AACH,C,CACD;;;AACA,SAASQ,aAAT,GAAyB,CAExB;;AAED,UAAUC,UAAV,CAAqBR,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEb,mBADA;AAENY,MAAAA,IAAI,EAAE;AACFO,QAAAA,MAAM,EAAET,MAAM,CAACE,IAAP,CAAYO;AADlB;AAFA,KAAD,CAAT;AAMH,GARD,CAQE,OAAOL,CAAP,EAAU;AACR,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEZ,mBADA;AAENc,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUM,eAAV,GAA4B;AACxB,QAAM7B,UAAU,CAACQ,mBAAD,EAAsBmB,UAAtB,CAAhB;AACH,C,CACD;;;AACA,SAASG,YAAT,GAAwB;AACpB,SAAO1B,KAAK,CAAC2B,GAAN,CAAU,QAAV,CAAP;AACH;;AAED,UAAUC,SAAV,CAAoBb,MAApB,EAA4B;AACxB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMjB,IAAI,CAAC2B,YAAD,CAAzB;AACA,UAAM7B,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEV,uBADA;AAENS,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOE,CAAP,EAAU;AACR,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAET,uBADA;AAENW,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUU,kBAAV,GAA+B;AAC3B,QAAMjC,UAAU,CAACW,uBAAD,EAA0BqB,SAA1B,CAAhB;AACH;;AAED,eAAe,UAAUE,WAAV,GAAwB;AACnC,QAAMpC,GAAG,CAAC,CACNC,IAAI,CAACkC,kBAAD,CADE,EAENlC,IAAI,CAAC0B,YAAD,CAFE,EAGN1B,IAAI,CAAC8B,eAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\nimport {\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    LOAD_MAIN_POSTS_REQUEST,\r\n    LOAD_MAIN_POSTS_SUCCESS,\r\n    LOAD_MAIN_POSTS_FAILURE,\r\n} from '../reducers/post'\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post', postData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({ // post reducer의 데이터를 수정\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n/////////////////\r\nfunction addCommentAPI() {\r\n    \r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(2000)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n            }\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n/////////////////\r\nfunction loadPostsAPI() {\r\n    return axios.get('/posts')\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI)\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadPosts)\r\n}\r\n\r\nexport default function* commentSaga() {\r\n    yield all([\r\n        fork(watchLoadMainPosts),\r\n        fork(watchAddPost),\r\n        fork(watchAddComment)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}