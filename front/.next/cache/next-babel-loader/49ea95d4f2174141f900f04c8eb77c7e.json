{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Button, Card, Avatar, Icon, Form, Input, List, Comment } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    cover: post.Images[0] && __jsx(\"img\", {\n      alt: \"example\",\n      src: \"http://localhost:3065/\".concat(post.Images[0].src)\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\"\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\"),\n    style: {\n      marginBottom: 15\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v, i) {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          key: i,\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: \"/hashtag/\".concat(v.slice(1))\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    row: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: post.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content // datetime={item.createdAt}\n\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.string\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/suksa/Desktop/code/new-react-nodeBird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Button","Card","Avatar","Icon","Form","Input","List","Comment","Link","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onToggleComment","prev","type","data","id","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","Images","src","marginBottom","pathname","query","User","nickname","split","map","v","i","match","tag","slice","Comments","length","item","propTypes","shape","object","string","img","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport { Button, Card, Avatar, Icon, Form, Input, List, Comment } from 'antd'\r\nimport Link from 'next/link'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST } from '../reducers/post'\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false)\r\n    const [commentText, setCommentText] = useState('')\r\n    const { me } = useSelector(state => state.user)\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post)\r\n    const dispatch = useDispatch()\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev)\r\n        if (!commentFormOpened) {\r\n            dispatch({\r\n                type: LOAD_COMMENTS_REQUEST,\r\n                data: post.id,\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const onSubmitComment = useCallback(e => {\r\n        e.preventDefault()\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다.')\r\n        }\r\n        dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: {\r\n                postId: post.id,\r\n                content: commentText,\r\n            }\r\n        })\r\n    }, [me && me.id, commentText])\r\n\r\n    useEffect(() => {\r\n        setCommentText('')\r\n    }, [commentAdded === true])\r\n\r\n    const onChangeCommentText = useCallback(e => {\r\n        setCommentText(e.target.value)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3065/${post.Images[0].src}`} />}\r\n                actions={[\r\n                    <Icon type=\"retweet\" key=\"retweet\" />,\r\n                    <Icon type=\"heart\" key=\"heart\" />,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n                    <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n                ]}\r\n                extra={<Button>팔로우</Button>}\r\n                style={{ marginBottom: 15 }}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                    title={post.User.nickname}\r\n                    description={<div>{post.content.split(/(#[^\\s]+)/g).map((v, i) => {\r\n                        if (v.match(/#[^\\s]+/)) {\r\n                            return (\r\n                                <Link key={i} href={{ pathname: '/hashtag', query: {tag: v.slice(1)} }} as={`/hashtag/${v.slice(1)}`}><a>{v}</a></Link>\r\n                            )\r\n                        }\r\n                        return v\r\n                    })}</div>}\r\n                />\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea row={4} value={commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n                    </Form>\r\n                    <List \r\n                        header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={<Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                                    content={item.content}\r\n                                    // datetime={item.createdAt}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n    })\r\n}\r\n\r\nexport default PostCard\r\n"]},"metadata":{},"sourceType":"module"}